class Token:
    def __init__(self, token_type, value):
        self.type = token_type
        self.value = value

    def __repr__(self):
        return f"{self.type}({self.value})"


# class Lexer:
#     def __init__(self, transition_table, accepting_states):
#         self.transition_table = transition_table
#         self.accepting_states = accepting_states
#         self.current_state = 0
#         self.current_token = ''
#
#     def get_next_token(self, input_string):
#         self.current_state = 0
#         self.current_token = ''
#         for char in input_string:
#             try:
#                 self.current_state = self.transition_table[(self.current_state, char)]
#                 self.current_token += char
#             except KeyError:
#                 return False, self.current_token, self.current_state
#         if self.current_state in self.accepting_states:
#             return True, self.current_token, self.current_state
#         else:
#             return False, self.current_token, self.current_state


class Lexer:
    def __init__(self, transition_table, accepting_states):
        self.transition_table = transition_table
        self.accepting_states = accepting_states
        self.current_state = 0
        self.current_token = ''

    def get_next_token(self, input_string):
        self.current_state = 0
        self.current_token = ''
        for char in input_string:
            try:
                self.current_state = self.transition_table[(self.current_state, char)]
                self.current_token += char
                print(f"Current token: {self.current_token}, current state: {self.current_state}")
            except KeyError:
                return False, self.current_token, self.current_state
        if self.current_state in self.accepting_states:
            return True, self.current_token, self.current_state
        else:
            return False, self.current_token, self.current_state
